plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
	id 'checkstyle'
	id 'org.barfuin.gradle.jacocolog' version '3.1.0'
}

group = 'ru.tinkoff'
version = '0.0.1-SNAPSHOT'

jacoco {
	toolVersion = "0.8.12"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
		html.required.set(true)
		csv.required.set(false)
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/dto/**'
			])
		}))
	}
}

checkstyle {
	toolVersion = '10.3'
	configFile = file('checkstyle/checkstyle.xml')
}

tasks.withType(Checkstyle) {
	reports {
		xml.required.set(false)
		html.required.set(true)
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	implementation 'org.liquibase:liquibase-core'
	implementation "io.jsonwebtoken:jjwt-api:${jwtVersion}"
	implementation "io.jsonwebtoken:jjwt-impl:${jwtVersion}"
	implementation "io.jsonwebtoken:jjwt-jackson:${jwtVersion}"
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation "org.testcontainers:testcontainers:${testContainersVersion}"
	testImplementation "org.testcontainers:postgresql:${testContainersVersion}"
	testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}