plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.0.20'
    id 'org.jetbrains.kotlin.plugin.serialization' version "2.0.20"
    id 'org.jetbrains.kotlin.plugin.spring' version '2.0.20'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        html.required.set(true)
        csv.required.set(false)
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/dto/**'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.70
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

group = 'ru.fintech'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

ext {
    ktorVersion = '3.0.0-rc-1'
    junitVersion = '5.10.0'
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.reflections:reflections:0.10.2")
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation "io.ktor:ktor-client:${ktorVersion}"
    implementation "io.ktor:ktor-client-cio-jvm:${ktorVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.1"

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation "io.ktor:ktor-client-mock:${ktorVersion}"
    testImplementation 'org.wiremock:wiremock:3.9.1'
    testImplementation 'org.testcontainers:testcontainers:1.20.1'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.4.0'
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.register('integrationTest', Test) {
    description = 'Интеграционные'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}